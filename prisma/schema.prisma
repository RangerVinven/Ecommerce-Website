generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Baskets {
  ProductName String    @db.VarChar(100)
  CustomerID  Int       @db.UnsignedInt
  Quantity    Int       @default(1) @db.UnsignedTinyInt
  ID          String    @id @unique(map: "ID_UNIQUE") @db.VarChar(200)
  Customers   Customers @relation(fields: [CustomerID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "FKBasketsCustomerID")
  Products    Products  @relation(fields: [ProductName], references: [ProductName], onDelete: NoAction, onUpdate: NoAction, map: "FKBasketsProductName")

  @@index([CustomerID], map: "FKBasketsCustomerID_idx")
  @@index([ProductName], map: "FKBasketsProductID_idx")
}

model Categories {
  Category String     @id @unique(map: "Category_UNIQUE") @db.VarChar(50)
  Products Products[]
}

model Customers {
  ID        Int         @id @unique(map: "ID_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  FirstName String      @db.VarChar(30)
  LastName  String      @db.VarChar(45)
  Email     String      @unique(map: "Email_UNIQUE") @db.VarChar(80)
  Password  String      @db.VarChar(128)
  Baskets   Baskets[]
  Reviews   Reviews[]
  Wishlists Wishlists[]
}

model DiscountCodes {
  Code               String    @id @unique(map: "ID_UNIQUE") @db.VarChar(15)
  DiscountPercentage Int       @db.UnsignedTinyInt
  ExpiryDate         DateTime? @db.Date
  StartDate          DateTime? @db.Date
}

model ProductOptionChoices {
  ID             Int            @unique(map: "ID_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  ProductOption  Int            @db.UnsignedInt
  Choice         String         @unique(map: "Choice_UNIQUE") @db.VarChar(15)
  IsAvaliable    Int            @default(1) @db.TinyInt
  ProductOptions ProductOptions @relation(fields: [ProductOption], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "FKProductOptionChoicesProductOption")

  @@index([ProductOption], map: "FKProductOptionChoicesProductOption_idx")
}

model ProductOptions {
  ID                   Int                    @unique(map: "ID_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  ProductName          String                 @db.VarChar(100)
  OptionName           String                 @db.VarChar(20)
  ProductOptionChoices ProductOptionChoices[]
  Products             Products               @relation(fields: [ProductName], references: [ProductName], onDelete: NoAction, onUpdate: NoAction, map: "FKProductOptionsProductName")

  @@index([ProductName], map: "FKProductOptionsProductName_idx")
}

model ProductPictures {
  ID             Int      @unique(map: "ID_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  ProductName    String   @db.VarChar(100)
  Picture        String   @db.Text
  OrderInDisplay Int      @db.TinyInt
  Products       Products @relation(fields: [ProductName], references: [ProductName], onDelete: NoAction, onUpdate: NoAction, map: "FKProductPicturesProductName")

  @@index([ProductName], map: "FKProductPicturesProductName_idx")
}

model Products {
  ProductName     String            @id @unique(map: "ProductName_UNIQUE") @db.VarChar(100)
  Price           Decimal           @db.Decimal(10, 2)
  Description     String            @db.Text
  Category        String?           @db.VarChar(50)
  IsAvaliable     Int               @default(1) @db.TinyInt
  ThumbnailImage  String?           @db.VarChar(100)
  Baskets         Baskets[]
  ProductOptions  ProductOptions[]
  ProductPictures ProductPictures[]
  Categories      Categories?       @relation(fields: [Category], references: [Category], onDelete: NoAction, onUpdate: NoAction, map: "FKProductsCategory")
  Reviews         Reviews[]
  Wishlists       Wishlists[]

  @@index([Category], map: "Category_idx")
}

model Reviews {
  NumberOfStars Int       @db.UnsignedTinyInt
  CustomerID    Int       @db.UnsignedInt
  DateOfReview  DateTime  @db.Date
  Review        String?   @db.Text
  ProductName   String    @db.VarChar(100)
  ID            Int       @id @unique(map: "ID_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  Customers     Customers @relation(fields: [CustomerID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "FKReviewsCustomerID")
  Products      Products  @relation(fields: [ProductName], references: [ProductName], onDelete: NoAction, onUpdate: NoAction, map: "FKReviewsProductName")

  @@index([CustomerID], map: "CustomerID_idx")
  @@index([ProductName], map: "FKReviewsProductName_idx")
}

model Settings {
  ID            Int    @id @unique(map: "ID_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  Setting_Name  String @unique(map: "Setting Name_UNIQUE") @map("Setting Name") @db.VarChar(45)
  Setting_Value String @map("Setting Value") @db.Text
}

model Wishlists {
  ProductName String    @db.VarChar(100)
  CustomerID  Int       @db.UnsignedInt
  ID          Int       @id @unique(map: "ID_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  Customers   Customers @relation(fields: [CustomerID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "FKWishlistsCustomerID")
  Products    Products  @relation(fields: [ProductName], references: [ProductName], onDelete: NoAction, onUpdate: NoAction, map: "FKWishlistsProductName")

  @@index([CustomerID], map: "FKWishlistsCustomerID_idx")
  @@index([ProductName], map: "FKWishlistsProductID_idx")
}
